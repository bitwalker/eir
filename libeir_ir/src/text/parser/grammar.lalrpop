//-*- mode: rust -*-

use libeir_diagnostics::{SourceIndex, SourceSpan, Diagnostic, Label as DiagLabel};
use libeir_intern::{Ident, Symbol};
use libeir_util_parse::ErrorReceiver;
use libeir_util_number::ToPrimitive;

use crate::{BasicType, BinOp};
use crate::constant::Integer;
use crate::text::parser::lexer::Token;
use crate::text::ast::{Module, ModuleItem, Function, FunctionItem, Label,
                       Op, CallControlFlowOp, CallFunctionOp, Value,
                       Assignment, UnpackValueListOp, IfBoolOp,
                       TraceCaptureRawOp, MatchEntry, MatchKind,
                       MatchOp, CaseOp, CaseEntry, CasePattern, Meta, DynToken};
use super::ParserErrorReceiver;
use super::errors::{ParserError, Errors};

grammar<'a>(errors: &'a mut ParserErrorReceiver<'a>);

#[inline]
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => {
        let mut v = v;
        if let Some(n) = e {
            v.push(n);
        }
        v
    }
};

pub Module: Module = {
    <l:@L> <name:atom> "{" <items:ModuleItem*> "}" <r:@R> => {
        Module {
            span: span!(l, r),
            name: name,
            items,
        }
    }
};

ModuleItem: ModuleItem = {
    <Function> => ModuleItem::Function(<>),
};

pub StandaloneFunction: (Ident, Function) = {
    <l:@L> <module:atom> ":" <name:atom> "/" <arity:integer> "{" <items:FunctionItem*> "}" <r:@R> => {
        (
            module,
            Function {
                span: span!(l, r),
                name: name,
                arity: arity,
                items,
            }
        )
    }
};

Function: Function = {
    <l:@L> <name:atom> "/" <arity:integer> "{" <items:FunctionItem*> "}" <r:@R> => {
        Function {
            span: span!(l, r),
            name: name,
            arity: arity,
            items,
        }
    }
};

FunctionItem: FunctionItem = {

    // Assignments
    <FunctionAssignItem> ";" => <>,

    // Operations
    <FunctionOp> ";" => FunctionItem::Op(<>),

    // Meta
    <l:@L> "!" <name:ident> <tokens:DynToken*> ";" <r:@R> => {
        FunctionItem::Meta(Meta {
            span: SourceSpan::new(l, r),
            name,
            tokens,
        })
    },

    // Label
    <l:@L> <name:Value> "(" <args:Comma<Value>> ")" ":" <r:@R> => {
        let span = SourceSpan::new(l, r);
        if name.block().is_none() {
            errors.error(
                Diagnostic::error()
                    .with_message("label name must be block")
                    .with_labels(vec![DiagLabel::primary(span.source_id(), span)])
                    .into()
            );
        }
        for arg in args.iter() {
            if arg.value().is_none() {
                errors.error(
                    Diagnostic::error()
                        .with_message("argument to label must be value")
                        .with_labels(vec![DiagLabel::primary(span.source_id(), span)])
                        .into()
                );
            }
        }
        FunctionItem::Label(Label { span: span!(l, r), name: name, args })
    },

};

#[inline]
FunctionAssignItem: FunctionItem = {
    <l:@L> <lhs:Value> "=" <rhs:Value> <r:@R> => {
        if lhs.value().is_none() {
            let span = SourceSpan::new(l, r);
            errors.error(
                Diagnostic::error()
                    .with_message("assignment must be to a value")
                    .with_labels(vec![DiagLabel::primary(span.source_id(), span)])
                    .into()
            );
        }

        FunctionItem::Assignment(Assignment {
            span: span!(l, r),
            lhs,
            rhs,
        })
    }
};

DynToken: DynToken = {
    <DynToken100> => <>,
};

DynTokenInner: DynToken = {
    <l:@L> ";" <r:@R> => DynToken::SemiColon(span!(l, r)),
    <DynToken100> => <>,
};

DynToken100: DynToken = {
    <l:@L> "(" <i:DynTokenInner*> ")" <r:@R> => DynToken::Parens(i, span!(l, r)),
    <l:@L> "{" <i:DynTokenInner*> "}" <r:@R> => DynToken::Braces(i, span!(l, r)),
    <l:@L> "%{" <i:DynTokenInner*> "}" <r:@R> => DynToken::MapBraces(i, span!(l, r)),
    <l:@L> "[" <i:DynTokenInner*> "]" <r:@R> => DynToken::SquareBrackets(i, span!(l, r)),
    <l:@L> "<" <i:DynTokenInner*> ">" <r:@R> => DynToken::AngleBrackets(i, span!(l, r)),

    <i:ident> => DynToken::Ident(i),
    <i:variable> => DynToken::Variable(i),

    <i:atom> => DynToken::Atom(i),
    <l:@L> <i:integer> <r:@R> => DynToken::Integer(i, span!(l, r)),
    <i:float> => DynToken::Float(i),
    <s:string> => DynToken::String(s),

    <l:@L> "%" <r:@R> => DynToken::Percent(span!(l, r)),
    <l:@L> ":" <r:@R> => DynToken::Colon(span!(l, r)),
    <l:@L> "," <r:@R> => DynToken::Comma(span!(l, r)),
    <l:@L> "?" <r:@R> => DynToken::Question(span!(l, r)),
    <l:@L> "/" <r:@R> => DynToken::ForwardSlash(span!(l, r)),
    <l:@L> "=" <r:@R> => DynToken::Equals(span!(l, r)),
    <l:@L> "==" <r:@R> => DynToken::EqualsEquals(span!(l, r)),
    <l:@L> "=>" <r:@R> => DynToken::FatArrow(span!(l, r)),
    <l:@L> "_" <r:@R> => DynToken::Underscore(span!(l, r)),
    <l:@L> "|" <r:@R> => DynToken::Pipe(span!(l, r)),
    <l:@L> "@" <r:@R> => DynToken::At(span!(l, r)),
    <l:@L> "!" <r:@R> => DynToken::Bang(span!(l, r)),

    <l:@L> "unpack" <r:@R> => DynToken::Unpack(span!(l, r)),
    <l:@L> "unreachable" <r:@R> => DynToken::Unreachable(span!(l, r)),
    <l:@L> "arity" <r:@R> => DynToken::Arity(span!(l, r)),
    <l:@L> "if_bool" <r:@R> => DynToken::IfBool(span!(l, r)),
    <l:@L> "trace_capture_raw" <r:@R> => DynToken::TraceCaptureRaw(span!(l, r)),
    <l:@L> "value" <r:@R> => DynToken::Value(span!(l, r)),
    <l:@L> "match" <r:@R> => DynToken::Match(span!(l, r)),
    <l:@L> "type" <r:@R> => DynToken::Type(span!(l, r)),
    <l:@L> "case" <r:@R> => DynToken::Case(span!(l, r)),
    <l:@L> "guard" <r:@R> => DynToken::Guard(span!(l, r)),
    <l:@L> "except" <r:@R> => DynToken::Except(span!(l, r)),
};

#[inline]
FunctionOp: Op = {

    // Intrinsic/Dynop
    "@" <name:ident> <tokens:DynToken*> => {
        Op::Dyn(name, tokens)
    },

    // Call
    <l:@L> <target:Value> "(" <args:Comma<Value>> ")" "=>" <ret:Value> "except" <thr:Value> <r:@R> => {
        Op::CallFunction(CallFunctionOp {
            span: span!(l, r),
            target,
            ret,
            thr,
            args,
        })
    },
    <l:@L> <target:Value> "(" <args:Comma<Value>> ")" <r:@R> => {
        Op::CallControlFlow(CallControlFlowOp {
            span: span!(l, r),
            target,
            args,
        })
    },

    // UnpackValueList
    <l:@L> "unpack" <value:Value> "arity" <arity:integer> "=>" <block:Value> <r:@R> => {
        Op::UnpackValueList(UnpackValueListOp {
            span: span!(l, r),
            arity: arity.to_usize().unwrap(),
            value,
            block,
        })
    },

    <l:@L> "if_bool" <value:Value> <tru:Value> <fal:Value> <or:Value?> <r:@R> => {
        Op::IfBool(IfBoolOp {
            span: span!(l, r),
            value,
            tru,
            fal,
            or,
        })
    },

    <l:@L> "trace_capture_raw" <then:Value> <r:@R> => {
        Op::TraceCaptureRaw(TraceCaptureRawOp {
            span: span!(l, r),
            then,
        })
    },

    <l:@L> "match" <value:Value> "{" <entries:MatchEntry*> "}" <r:@R> => {
        Op::Match(MatchOp {
            span: span!(l, r),
            value,
            entries,
        })
    },

    <l:@L> "case" <value:Value> "{" <entries:CaseEntry*> <no_match:CaseNoMatch?> "}" <r:@R> => {
        Op::Case(CaseOp {
            span: span!(l, r),
            value,
            entries,
            no_match,
        })
    },

    // Unreachable
    "unreachable" => Op::Unreachable,

};

CaseEntry: CaseEntry = {
    <l:@L> "<" <patterns:Comma<CasePattern>> ">" "guard" <guard: Value> "=>" <target:Value> "(" <args:Comma<ident>> ")" ";" <r:@R> => {
        CaseEntry {
            span: span!(l, r),
            patterns,
            args,
            guard,
            target,
        }
    },
    <l:@L> <pattern:CasePattern> "guard" <guard:Value> "=>" <target:Value> "(" <args:Comma<ident>> ")" ";" <r:@R> => {
        CaseEntry {
            span: span!(l, r),
            patterns: vec![pattern],
            args,
            guard,
            target,
        }
    },
};

CaseNoMatch: Value = {
    "_" "=>" <Value> ";" => <>,
};

CasePattern: CasePattern = {
    "(" <CasePattern> ")" => <>,
    "{" <elements:Comma<CasePattern>> "}" => {
        CasePattern::Tuple {
            elements,
        }
    },
    "[" <mut heads:Comma<CasePattern>> <tail: ("|" <CasePattern>)?> "]" => {
        let mut acc = tail.unwrap_or(CasePattern::Value(Value::Nil));
        for elem in heads.drain(..).rev() {
            acc = CasePattern::ListCell {
                head: Box::new(elem),
                tail: Box::new(acc),
            };
        }
        acc
    },
    <name:ident> "@" <pat:CasePattern> => {
        CasePattern::Binding {
            name,
            pattern: Box::new(pat),
        }
    },
    "_" => {
        CasePattern::Wildcard
    }
};

MatchEntry: MatchEntry = {
    <l:@L> <kind:MatchKind> "=>" <target:Value> ";" <r:@R> => {
        MatchEntry {
            span: span!(l, r),
            target,
            kind,
        }
    }
};

MatchKind: MatchKind = {
    "value" <value:Value> =>
        MatchKind::Value(value),
    "type" "%{" "}" =>
        MatchKind::Type(BasicType::Map),
    "{" "}" "arity" <arity:integer> =>
        MatchKind::Tuple(arity.to_usize().unwrap()),
    "[" "]" =>
        MatchKind::ListCell,
    "%{" <key:Value> "}" =>
        MatchKind::MapItem(key),
    "_" =>
        MatchKind::Wildcard,
};

Value: Value = {
    <m:Value> ":" <f:Value> "/" <a:Value100> =>
        Value::CaptureFunction(Box::new(m), Box::new(f), Box::new(a)),
    <left:Value> <op:BinOp> <right:Value100> =>
        Value::BinOp(Box::new(left), op, Box::new(right)),
    Value100,
};

Value100: Value = {
    ValueMax
};

ValueMax: Value = {
    "[" <head:Comma<Value>> <tail:("|" <Value>)?> "]" => {
        if head.len() == 0 {
            if let Some(tail) = tail {
                tail
            } else {
                Value::Nil
            }
        } else {
            Value::List(head, tail.map(Box::new))
        }
    },
    "{" <Comma<Value>> "}" =>
        Value::Tuple(<>),
    "<" <Comma<Value>> ">" =>
        Value::ValueList(<>),
    <AtomicValue> => <>,
};

AtomicValue: Value = {
    <atom> => Value::Atom(<>),
    <integer> => Value::Integer(<>),
    <Block> => Value::Block(<>),
    <variable> => Value::Value(<>),
};

BinOp: BinOp = {
    "==" => BinOp::Equal,
};

Block: Ident = {
    <ident> => <>,
    <l:@L> "type" <r:@R> =>
        Ident::new(Symbol::intern("type"), SourceSpan::new(l, r)),
};

extern {
    type Location = SourceIndex;
    type Error = ParserError;

    enum Token {
        "EOF" => Token::EOF,

        ident => Token::Ident(<Ident>),
        variable => Token::Variable(<Ident>),

        atom => Token::Atom(<Ident>),
        integer => Token::Integer(<Integer>),
        float => Token::Float(<Ident>),
        string => Token::String(<Ident>),

        "(" => Token::ParenOpen,
        ")" => Token::ParenClose,
        "{" => Token::CurlyOpen,
        "}" => Token::CurlyClose,
        "[" => Token::SquareOpen,
        "]" => Token::SquareClose,
        "<" => Token::Less,
        ">" => Token::Greater,
        "%" => Token::Percent,
        "%{" => Token::MapOpen,
        ":" => Token::Colon,
        ";" => Token::Semicolon,
        "," => Token::Comma,
        "?" => Token::Question,
        "/" => Token::ForwardSlash,
        "=" => Token::Equals,
        "==" => Token::EqualsEquals,
        "=>" => Token::FatArrow,
        "_" => Token::Underscore,
        "|" => Token::Pipe,
        "@" => Token::At,
        "!" => Token::Bang,

        "unpack" => Token::UnpackValueList,
        "unreachable" => Token::Unreachable,
        "arity" => Token::Arity,
        "if_bool" => Token::IfBool,
        "trace_capture_raw" => Token::TraceCaptureRaw,
        "value" => Token::Value,
        "match" => Token::Match,
        "type" => Token::Type,
        "case" => Token::Case,
        "guard" => Token::Guard,
        "except" => Token::Except,
    }

}
